<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>تغییر رمز عبور - پنل مدیریت</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f5f6fa;
      min-height: 100vh;
    }

    .sidebar {
      position: fixed;
      right: 0;
      top: 0;
      width: 260px;
      height: 100vh;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px 0;
      overflow-y: auto;
      z-index: 1000;
    }

    .sidebar-header {
      padding: 0 20px 20px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      margin-bottom: 20px;
    }

    .sidebar-header h2 {
      font-size: 22px;
      margin-bottom: 5px;
    }

    .sidebar-header p {
      font-size: 13px;
      opacity: 0.8;
    }

    .sidebar-menu {
      list-style: none;
    }

    .sidebar-menu li {
      margin-bottom: 5px;
    }

    .sidebar-menu a {
      display: flex;
      align-items: center;
      padding: 12px 20px;
      color: white;
      text-decoration: none;
      transition: all 0.3s;
      position: relative;
    }

    .sidebar-menu a:hover,
    .sidebar-menu a.active {
      background: rgba(255, 255, 255, 0.1);
    }

    .sidebar-menu a.active::before {
      content: '';
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      width: 4px;
      background: white;
    }

    .sidebar-menu a i {
      margin-left: 12px;
      width: 20px;
      text-align: center;
    }

    .sidebar-footer {
      position: absolute;
      bottom: 20px;
      left: 20px;
      right: 20px;
    }

    .logout-btn {
      width: 100%;
      padding: 12px;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s;
      font-size: 14px;
    }

    .logout-btn:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .main-content {
      margin-right: 260px;
      padding: 30px;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .password-card {
      background: white;
      border-radius: 20px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      max-width: 500px;
      width: 100%;
    }

    .card-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }

    .card-header i {
      font-size: 48px;
      margin-bottom: 15px;
    }

    .card-header h1 {
      font-size: 24px;
      margin-bottom: 8px;
    }

    .card-header p {
      opacity: 0.9;
      font-size: 14px;
    }

    .card-body {
      padding: 40px;
    }

    .alert {
      padding: 12px 15px;
      border-radius: 10px;
      margin-bottom: 20px;
      font-size: 14px;
      display: none;
    }

    .alert.show {
      display: block;
      animation: slideDown 0.3s ease-out;
    }

    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .alert-success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .alert-error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #2c3e50;
      font-weight: 500;
      font-size: 14px;
    }

    .password-input-wrapper {
      position: relative;
    }

    .form-group input {
      width: 100%;
      padding: 12px 45px 12px 15px;
      border: 2px solid #e0e0e0;
      border-radius: 10px;
      font-size: 15px;
      transition: all 0.3s;
      font-family: inherit;
    }

    .form-group input:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-group input.error {
      border-color: #e74c3c;
    }

    .toggle-password {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #95a5a6;
      cursor: pointer;
      font-size: 18px;
      transition: color 0.3s;
    }

    .toggle-password:hover {
      color: #667eea;
    }

    .error-message {
      color: #e74c3c;
      font-size: 13px;
      margin-top: 5px;
      display: none;
    }

    .error-message.show {
      display: block;
    }

    .password-requirements {
      background: #f8f9fa;
      border-radius: 10px;
      padding: 15px;
      margin-top: 20px;
      font-size: 13px;
    }

    .password-requirements h4 {
      color: #2c3e50;
      margin-bottom: 10px;
      font-size: 14px;
    }

    .password-requirements ul {
      list-style: none;
      padding: 0;
    }

    .password-requirements li {
      padding: 5px 0;
      color: #555;
    }

    .password-requirements li i {
      margin-left: 8px;
      width: 16px;
    }

    .password-requirements li.valid {
      color: #27ae60;
    }

    .password-requirements li.valid i {
      color: #27ae60;
    }

    .btn-submit {
      width: 100%;
      padding: 14px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 10px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      position: relative;
      overflow: hidden;
    }

    .btn-submit:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }

    .btn-submit:active {
      transform: translateY(0);
    }

    .btn-submit:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .btn-submit .spinner {
      display: none;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-top-color: white;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
      margin: 0 auto;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .btn-submit.loading .spinner {
      display: block;
    }

    .btn-submit.loading .btn-text {
      display: none;
    }

    .password-strength {
      height: 4px;
      background: #e0e0e0;
      border-radius: 2px;
      margin-top: 8px;
      overflow: hidden;
      display: none;
    }

    .password-strength.show {
      display: block;
    }

    .password-strength-bar {
      height: 100%;
      transition: all 0.3s;
      border-radius: 2px;
    }

    .password-strength-bar.weak {
      width: 33%;
      background: #e74c3c;
    }

    .password-strength-bar.medium {
      width: 66%;
      background: #f39c12;
    }

    .password-strength-bar.strong {
      width: 100%;
      background: #27ae60;
    }

    @media (max-width: 768px) {
      .sidebar {
        transform: translateX(100%);
      }

      .main-content {
        margin-right: 0;
        padding: 20px;
      }

      .card-body {
        padding: 30px 20px;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <div class="sidebar">
    <div class="sidebar-header">
      <h2>پنل مدیریت</h2>
      <p id="adminName">در حال بارگذاری...</p>
    </div>

    <ul class="sidebar-menu">
      <li>
        <a href="/dashboard">
          <i class="fas fa-home"></i>
          <span>داشبورد</span>
        </a>
      </li>
      <li>
        <a href="/products">
          <i class="fas fa-box"></i>
          <span>محصولات</span>
        </a>
      </li>
      <li>
        <a href="/categories">
          <i class="fas fa-folder"></i>
          <span>دسته‌بندی‌ها</span>
        </a>
      </li>
      <li>
        <a href="/change-password" class="active">
          <i class="fas fa-key"></i>
          <span>تغییر رمز عبور</span>
        </a>
      </li>
    </ul>

    <div class="sidebar-footer">
      <button class="logout-btn" onclick="logout()">
        <i class="fas fa-sign-out-alt"></i> خروج
      </button>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <div class="password-card">
      <div class="card-header">
        <i class="fas fa-lock"></i>
        <h1>تغییر رمز عبور</h1>
        <p>برای امنیت بیشتر، رمز عبور قوی انتخاب کنید</p>
      </div>

      <div class="card-body">
        <div id="alertBox" class="alert"></div>

        <form id="passwordForm">
          <div class="form-group">
            <label for="currentPassword">رمز عبور فعلی *</label>
            <div class="password-input-wrapper">
              <input 
                type="password" 
                id="currentPassword" 
                name="currentPassword" 
                required
                placeholder="رمز عبور فعلی خود را وارد کنید"
              >
              <button type="button" class="toggle-password" onclick="togglePassword('currentPassword')">
                <i class="fas fa-eye"></i>
              </button>
            </div>
            <div class="error-message" id="currentPasswordError"></div>
          </div>

          <div class="form-group">
            <label for="newPassword">رمز عبور جدید *</label>
            <div class="password-input-wrapper">
              <input 
                type="password" 
                id="newPassword" 
                name="newPassword" 
                required
                placeholder="رمز عبور جدید (حداقل ۶ کاراکتر)"
              >
              <button type="button" class="toggle-password" onclick="togglePassword('newPassword')">
                <i class="fas fa-eye"></i>
              </button>
            </div>
            <div class="password-strength">
              <div class="password-strength-bar"></div>
            </div>
            <div class="error-message" id="newPasswordError"></div>
          </div>

          <div class="form-group">
            <label for="confirmPassword">تکرار رمز عبور جدید *</label>
            <div class="password-input-wrapper">
              <input 
                type="password" 
                id="confirmPassword" 
                name="confirmPassword" 
                required
                placeholder="رمز عبور جدید را دوباره وارد کنید"
              >
              <button type="button" class="toggle-password" onclick="togglePassword('confirmPassword')">
                <i class="fas fa-eye"></i>
              </button>
            </div>
            <div class="error-message" id="confirmPasswordError"></div>
          </div>

          <div class="password-requirements">
            <h4>الزامات رمز عبور:</h4>
            <ul id="requirements">
              <li id="req-length">
                <i class="fas fa-circle"></i>
                حداقل ۶ کاراکتر
              </li>
              <li id="req-match">
                <i class="fas fa-circle"></i>
                تطابق رمز عبور جدید و تکرار آن
              </li>
            </ul>
          </div>

          <button type="submit" class="btn-submit" id="submitBtn">
            <span class="btn-text">تغییر رمز عبور</span>
            <div class="spinner"></div>
          </button>
        </form>
      </div>
    </div>
  </div>

  <script>
    const token = localStorage.getItem('authToken');
    if (!token) window.location.href = '/login';

    // Fetch user info
    fetch('/api/auth/me', {
      headers: { 'Authorization': `Bearer ${token}` }
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        document.getElementById('adminName').textContent = data.data.user.name;
      } else {
        logout();
      }
    });

    const currentPasswordInput = document.getElementById('currentPassword');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordForm = document.getElementById('passwordForm');
    const submitBtn = document.getElementById('submitBtn');
    const alertBox = document.getElementById('alertBox');

    // Toggle password visibility
    function togglePassword(fieldId) {
      const field = document.getElementById(fieldId);
      const button = field.nextElementSibling;
      const icon = button.querySelector('i');

      if (field.type === 'password') {
        field.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
      } else {
        field.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
      }
    }

    // Check password strength
    function checkPasswordStrength(password) {
      const strengthBar = document.querySelector('.password-strength');
      const bar = document.querySelector('.password-strength-bar');

      if (!password) {
        strengthBar.classList.remove('show');
        return;
      }

      strengthBar.classList.add('show');

      let strength = 0;
      if (password.length >= 6) strength++;
      if (password.length >= 10) strength++;
      if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
      if (/\d/.test(password)) strength++;
      if (/[^a-zA-Z0-9]/.test(password)) strength++;

      bar.className = 'password-strength-bar';
      
      if (strength <= 2) {
        bar.classList.add('weak');
      } else if (strength <= 4) {
        bar.classList.add('medium');
      } else {
        bar.classList.add('strong');
      }
    }

    // Check requirements
    function checkRequirements() {
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Check length
      const lengthReq = document.getElementById('req-length');
      if (newPassword.length >= 6) {
        lengthReq.classList.add('valid');
        lengthReq.querySelector('i').className = 'fas fa-check-circle';
      } else {
        lengthReq.classList.remove('valid');
        lengthReq.querySelector('i').className = 'fas fa-circle';
      }

      // Check match
      const matchReq = document.getElementById('req-match');
      if (newPassword && confirmPassword && newPassword === confirmPassword) {
        matchReq.classList.add('valid');
        matchReq.querySelector('i').className = 'fas fa-check-circle';
      } else {
        matchReq.classList.remove('valid');
        matchReq.querySelector('i').className = 'fas fa-circle';
      }
    }

    // Clear field error
    function clearFieldError(field) {
      field.classList.remove('error');
      const errorId = field.id + 'Error';
      const errorElement = document.getElementById(errorId);
      if (errorElement) {
        errorElement.classList.remove('show');
      }
    }

    // Show field error
    function showFieldError(field, message) {
      field.classList.add('error');
      const errorId = field.id + 'Error';
      const errorElement = document.getElementById(errorId);
      if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.add('show');
      }
    }

    // Show alert
    function showAlert(message, type) {
      alertBox.textContent = message;
      alertBox.className = `alert alert-${type} show`;
      
      if (type === 'success') {
        setTimeout(() => {
          alertBox.classList.remove('show');
        }, 3000);
      }
    }

    // Event listeners
    newPasswordInput.addEventListener('input', () => {
      clearFieldError(newPasswordInput);
      checkPasswordStrength(newPasswordInput.value);
      checkRequirements();
    });

    confirmPasswordInput.addEventListener('input', () => {
      clearFieldError(confirmPasswordInput);
      checkRequirements();
    });

    currentPasswordInput.addEventListener('input', () => {
      clearFieldError(currentPasswordInput);
    });

    // Form submission
    passwordForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Clear previous errors
      clearFieldError(currentPasswordInput);
      clearFieldError(newPasswordInput);
      clearFieldError(confirmPasswordInput);
      alertBox.classList.remove('show');

      const currentPassword = currentPasswordInput.value;
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Validation
      let hasError = false;

      if (!currentPassword) {
        showFieldError(currentPasswordInput, 'رمز عبور فعلی الزامی است');
        hasError = true;
      }

      if (!newPassword) {
        showFieldError(newPasswordInput, 'رمز عبور جدید الزامی است');
        hasError = true;
      } else if (newPassword.length < 6) {
        showFieldError(newPasswordInput, 'رمز عبور باید حداقل ۶ کاراکتر باشد');
        hasError = true;
      }

      if (!confirmPassword) {
        showFieldError(confirmPasswordInput, 'تکرار رمز عبور الزامی است');
        hasError = true;
      } else if (newPassword !== confirmPassword) {
        showFieldError(confirmPasswordInput, 'رمز عبور جدید و تکرار آن یکسان نیستند');
        hasError = true;
      }

      if (currentPassword === newPassword) {
        showFieldError(newPasswordInput, 'رمز عبور جدید نباید با رمز فعلی یکسان باشد');
        hasError = true;
      }

      if (hasError) return;

      // Show loading
      submitBtn.classList.add('loading');
      submitBtn.disabled = true;

      try {
        const response = await fetch('/api/auth/change-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            currentPassword,
            newPassword
          })
        });

        const data = await response.json();

        if (data.success) {
          showAlert('رمز عبور با موفقیت تغییر کرد', 'success');
          passwordForm.reset();
          document.querySelector('.password-strength').classList.remove('show');
          
          // Reset requirements
          document.querySelectorAll('.password-requirements li').forEach(li => {
            li.classList.remove('valid');
            li.querySelector('i').className = 'fas fa-circle';
          });

          // Optional: Logout after password change
          setTimeout(() => {
            if (confirm('رمز عبور تغییر کرد. آیا می‌خواهید دوباره وارد شوید؟')) {
              logout();
            }
          }, 2000);
        } else {
          if (data.message.includes('رمز عبور فعلی')) {
            showFieldError(currentPasswordInput, data.message);
          } else {
            showAlert(data.message || 'خطا در تغییر رمز عبور', 'error');
          }
        }
      } catch (error) {
        console.error('Change password error:', error);
        showAlert('خطا در برقراری ارتباط با سرور', 'error');
      } finally {
        submitBtn.classList.remove('loading');
        submitBtn.disabled = false;
      }
    });

    // Logout function
    function logout() {
      localStorage.removeItem('authToken');
      localStorage.removeItem('userName');
      window.location.href = '/login';
    }
  </script>
</body>
</html> {
      margin-bottom: 25px;
      position: relative;
    }

    .form-group